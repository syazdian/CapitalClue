@using CapitalClue.Frontend.Shared.ServiceInterfaces
@inject IFetchData fetchData
@inject IStateContainer stateContainer
<RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">2. Tell Us Your Financial Data</RadzenText>

<RadzenStack Orientation="Orientation.Vertical">

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">How much is the house you want to buy?</RadzenText>
        <RadzenNumeric TValue="double" Format="c" @bind-Value=@houseCost InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">How much downpayment are you paying?</RadzenText>
        <RadzenNumeric TValue="double" Format="c" @bind-Value=@downpayment InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">What is the interest rate?</RadzenText>
        <RadzenNumeric TValue="double" Format="p" @bind-Value=@interestRate InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">how much would be your monthly Mortgage payment?</RadzenText>
        <RadzenNumeric TValue="double" Format="c" @bind-Value=@mortagePayment InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">Is your mortgage payment 25 year or 30 year?</RadzenText>

        <RadzenRadioButtonList @bind-Value=@mortagePaymentPeriod TValue="int" class="mb-5">
            <Items>
                <RadzenRadioButtonListItem Text="25 year" Value="25" />
                <RadzenRadioButtonListItem Text="30 year" Value="30" />
            </Items>
        </RadzenRadioButtonList>

    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">how much are you paying monthly for rent?</RadzenText>
        <RadzenNumeric TValue="double" Format="c" @bind-Value=@montlyPaying InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
    </RadzenStack>
    <RadzenButton Click=@FillChart Text="Predict" ButtonStyle="ButtonStyle.Primary" />

</RadzenStack>

@code {
    double houseCost;
    double downpayment;
    double interestRate;
    double mortagePayment;
    int mortagePaymentPeriod;
    double montlyPaying;

    //todo get it from user
    double propertyBasePrice = 3000000;

    ChartDataItem[] revenuePropertyArr;


    public async Task FillChart()
    {
        //todo get city and type from user
        var percents = await fetchData.GetPropertyPredicionPercent("Toronto", "Condo");

        stateContainer.revenueProperty = new List<ChartDataItem>();
        stateContainer.revenuePropertyUpperBound = new List<ChartDataItem>();
        stateContainer.revenuePropertyLowerBound = new List<ChartDataItem>();

        int i = 0;
        foreach (var item in percents.ForeCastIndex)
        {
            double basePrice = 0;
            if (i == 0)
                basePrice = propertyBasePrice;
            else
                basePrice = stateContainer.revenueProperty[i - 1].Revenue;

            stateContainer.revenueProperty.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = basePrice * (1 + item.Value / 100) });
        }
        revenuePropertyArr = stateContainer.revenueProperty.ToArray();

        foreach (var item in percents.ConfidenceLowerBound)
        {
            double basePrice = 0;
            if (i == 0)
                basePrice = propertyBasePrice;
            else
                basePrice = stateContainer.revenuePropertyLowerBound[i - 1].Revenue;

            stateContainer.revenuePropertyLowerBound.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = basePrice * (1 + item.Value / 100) });
        }

        foreach (var item in percents.ConfidenceUpperBound)
        {
            double basePrice = 0;
            if (i == 0)
                basePrice = propertyBasePrice;
            else
                basePrice = stateContainer.revenuePropertyUpperBound[i - 1].Revenue;

            stateContainer.revenuePropertyUpperBound.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = basePrice * (1 + item.Value / 100) });
        }
    }
}
