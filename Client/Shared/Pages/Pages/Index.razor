@page "/"
@using CapitalClue.Frontend.Shared.Pages.Shared
@using CapitalClue.Frontend.Shared.Pages.Shared.Header

@inject ILocalDbRepository _localdb
@inject IStateContainer StateContainer

@attribute [Authorize]

<RadzenDialog></RadzenDialog>

<Header ShowSyncChanges="@localDbExist" RunLoadDatabaseInUi="(e)=>CallLoadDatabaseInUi(StateContainer.filterItemDto)" FetchButtonClicked="(e)=>FetchButtonClickedChange(e)"></Header>




<PageTitle>Bell Compare Page</PageTitle>

@if (!uiDbExist)
{
    @if (localDbExist || fetchButtonClicked)
    {
        <LocalDbLoader message="Loading Data ...."></LocalDbLoader>
    }
 }
else
{
    

    <div class="container marketing">
        <TopFilters FilterChanged="(e)=>ApplyFilters(e)"></TopFilters>

        <TableCompare TitleLob=@selectedLob  @ref="tableCompareComponent"></TableCompare>


    </div>
}


@code {
    TableCompare tableCompareComponent;

    string selectedLob;
    bool localDbExist = true;
    bool uiDbExist = false;
    bool fetchButtonClicked = false;
    //bool showloader = false;
    protected override async Task OnInitializedAsync()
    {
        if (await CheckDbExist())
        {
            await CallLoadDatabaseInUi(StateContainer.filterItemDto);
        }


        StateHasChanged();
    }
    public async void ApplyFilters(FilterItemDto _filterItemDto)
    {
        StateContainer.filterItemDto = _filterItemDto;
        selectedLob = StateContainer.filterItemDto.Lob;

        await tableCompareComponent.appliyFilterClicked();

    }

    public async Task<bool> CheckDbExist()
    {
        localDbExist = await _localdb.LocalDbExist();
        StateHasChanged();
        return localDbExist;
    }

    public void FetchButtonClickedChange(bool fetchButton)
    {
        uiDbExist = false;
        fetchButtonClicked = fetchButton;
        StateHasChanged();
    }

    public async Task<bool> UiDbExist()
    {
        if (StateContainer.bellSources.Count() > 1 || StateContainer.staplesSources.Count() > 1 || StateContainer.compareBellStaple.Count() > 1)
        {
            uiDbExist = true;
            return true;
        }
        uiDbExist = false;
        return false;
    }

    public async Task CallLoadDatabaseInUi(FilterItemDto filterItemDto)
    {
        localDbExist = true;
        uiDbExist = false;
        await  _localdb.LoadLocalDbToUi(filterItemDto);
        uiDbExist = true;
        StateHasChanged();
    }

}