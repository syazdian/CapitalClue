@using CapitalClue.Common.Models.Domain
@using CapitalClue.Frontend.Shared.ServiceInterfaces
@inject IStateContainer StateContainer
@inject IFetchData FetchData;
@inject IProfitCalculations ProfitCalculations;
@inject IFilterService filterService

<h3>StockChoice</h3>
<RadzenCard>

    <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnStepChange InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">  Stock Type </RadzenText>

            <RadzenFormField Text="Stock Types" Style="flex: 1;">
                <RadzenDropDown Name="Stock" Data=@stocks @bind-Value="@model.stocksValue" AllowClear=true />
                <RadzenRequiredValidator Component="Stock" Text="Choose Stock Type" Style="position: relative" />

            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">how much are you investing in Stock for down payment?</RadzenText>
            <RadzenNumeric Name="Downpayment" Format="c" Step="5000" @bind-Value=@model.downpayment InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
            <RadzenRequiredValidator Component="Downpayment" Text="Required" Style="position: relative" />
            <RadzenNumericRangeValidator Component="Downpayment" Min="1" Text="Downpayment should be greater than $0" Style="position: relative" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" class="rz-my-6">how much would you Monthly contribute in stock for next 5 years?</RadzenText>
            <RadzenNumeric Name="MonthlyContribution" Format="c" Step="500" @bind-Value=@model.monthlyContribution InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
            <RadzenRequiredValidator Component="MonthlyContribution" Text="Required" Style="position: relative" />
            <RadzenNumericRangeValidator Component="MonthlyContribution" Min="1" Text="Monthly Contribution should be greater than $0" Style="position: relative" />
        </RadzenStack>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Next"></RadzenButton>
    </RadzenTemplateForm>
</RadzenCard>


@code {
    [Parameter]
    public int SelectedIndex { get; set; }

    [Parameter]
    public EventCallback<int> StepChanged { get; set; }

    class Model
    {
        public string stocksValue;
        public int downpayment;
        public int monthlyContribution;
    }
    Model model = new Model();

    List<string> stocks = new();
    FilterItemsDisplay filterItems = new();
    protected override async Task OnInitializedAsync()
    {
        filterItems = await filterService.GetFilterItems();
        stocks = filterItems.StockFilterDisplayObj.Stocks;
    }

    private async Task OnStepChange(Model model)
    {
        Update();
        await FillChart();

        // StateContainer.StockDownpayment = model.downpayment;
        // StateContainer.StockContribution = model.monthlyContribution;
        // StateHasChanged();

        await StepChanged.InvokeAsync(3);
    }

    private void Update()
    {
        StateContainer.StockDownpayment = model.downpayment;
        StateContainer.StockContribution = model.monthlyContribution;
        StateHasChanged();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }

    public async Task FillChart()
    {

        var stockPredictionDto = await FetchData.GetStockPredicionPercent(model.stocksValue);
        var stockPredictionResult = ProfitCalculations.StockPrediction(stockPredictionDto, model.downpayment, model.monthlyContribution);

        StateContainer.revenueStock = new List<ChartDataItem>();
        StateContainer.revenueStockUpperBound = new List<ChartDataItem>();
        StateContainer.revenueStockLowerBound = new List<ChartDataItem>();
        var riskFactor = StateContainer.RiskFactor;
        foreach (var item in stockPredictionResult.ForeCastIndex)
        {
            StateContainer.revenueStock.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = item.Value * (1 + riskFactor) });
        }

        // foreach (var item in stockPredictionResult.ConfidenceLowerBound)
        // {
        //     StateContainer.revenueStockLowerBound.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = item.Value });
        // }

        // foreach (var item in stockPredictionResult.ConfidenceUpperBound)
        // {
        //     StateContainer.revenueStockUpperBound.Add(new ChartDataItem { Date = item.Key.ToString(), Revenue = item.Value });
        // }

        await StepChanged.InvokeAsync(3);
    }

}
