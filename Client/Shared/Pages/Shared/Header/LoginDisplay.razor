@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IStateContainer _stateContainer
@inject ISyncData syncData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <Authorized>
        @{
            UserName = @context.User.Identity?.Name;
            //  UserId = @context.User.Claims?.Where(x => x.Type == "name")?.Select(x => x.Value)?.FirstOrDefault();
        }
        @UserName
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string UserName { get; set; } = "User from Client";
    public string UserId { get; set; } =null;

    protected override async Task OnInitializedAsync()
    {

    }

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        return UserId ?? UserName;
    }
    async Task<string> getUserName()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        return user.Identity.Name;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var username = await getUserName();
            _stateContainer.UserName = username;
            _stateContainer.UserId = username;


            StateHasChanged();
        }
        await syncData.SendUserId(_stateContainer.UserId);
    }


    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
}
