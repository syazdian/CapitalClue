@page "/InBoth"

@using CapitalClue.Common.Models
@using CapitalClue.Common.Models.Enums;
@using CapitalClue.Frontend.Shared.Pages.Components
@using CapitalClue.Frontend.Shared.Pages.Shared.MultipleEdit;
@using CapitalClue.Frontend.Shared.ServiceInterfaces;
@using Microsoft.EntityFrameworkCore;
@inject ISyncData SyncData
@inject DialogService dialogService
@inject ICsvExport CsvExport
@inject ILocalDbRepository Localdb
@inject IJSRuntime JS
@inject IStateContainer StateContainer

<div style="float:right">
    <RadzenButton Click=@(MakeMultipleDelete) Visible=@visibleMultipleDelete Text="Delete Items" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" Icon="delete_forever" style="color:red" />
    <RadzenButton Click=@(MakeMultipleEdit) Visible=@visibleMultipleEdit Text="Edit Items" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" Icon="copy_all" style="color:green" />
    <RadzenButton Click=@(ExportCsv) Text="CSV" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" Icon="assignment_returned" style="color:green" />
</div>
<br />
<br />
<RadzenDataGrid @ref="Grid" CellDoubleClick="OnCellDoubleClickBoth"
                AllowFiltering="true" CellRender="@CellRender" AllowVirtualization="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="true" PageSize="10" RowUpdate="@OnCompareUpdateRow"
                AllowSorting="true" Data="@CompareBellStaple" TItem="CompareBellStapleDto" ColumnWidth="150px"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedInBoth>
    <Columns>

        <RadzenDataGridColumn TItem="CompareBellStapleDto" Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool?"
                                Value="@(selectedInBoth == null || selectedInBoth?.Any() != true ? false : !CompareBellStaple.All(i => selectedInBoth.Contains(i)) ? null : CompareBellStaple.Any(i => selectedInBoth.Contains(i)))"
                                Change="@(args => CheckAllRecords(args))" />
            </HeaderTemplate>
            <Template Context="compareRecord">
                <RadzenCheckBox TriState="false" Disabled="compareRecord.IsEditMode" Value="@(selectedInBoth != null && selectedInBoth.Contains(compareRecord))"
                                TValue="bool" Change=@(args => CheckRecord(args,compareRecord)) />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SRebateType" Title="RebateType" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="STransactionDate" Title="TransactionDate" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SOrderNumber" Title="Order #" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SPhone" Title="Phone" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SAmount" Title="S.Amount" TextAlign="TextAlign.Right" FormatString="{0:0.00}" Sortable="false" Width="100px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BAmount" Title="B.Amount" TextAlign="TextAlign.Right" FormatString="{0:0.00}" Sortable="false" Width="100px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="IsReconciled" Title="Reconciled" Width="130px"/>
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SComments" Title="S.Comments "/>
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BComments" Title="B.Comments "/>
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SBellTransactionId" Title="BellTransactionId" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SImei" Title="S.IMEI" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BImei" Title="B.IMEI" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SProduct" Title="S.Product" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BProduct" Title="B.Product" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SStoreNumber" Title="S.Store#" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BStoreNumber" Title="B.Store#" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SLocation" Title="S.Location" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SLob" Title="S.Lob" Width="100px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BLob" Title="B.Lob" Width="100px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SSubLob" Title="S.SubLob" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BSubLob" Title="B.SubLob" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SBrand" Title="S.Brand" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BBrand" Title="B.Brand" Width="120px" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SCustomerName" Title="S.CustomerName" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BCustomerName" Title="B.CustomerName" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SUpdateDate" Title="S.UpdateDate" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BUpdateDate" Title="B.UpdateDate" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SReconciledDate" Title="S.ReconciledDate" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BReconciledDate" Title="B.ReconciledDate" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="SReconciledBy" Title="S.ReconciledBy" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="BReconciledBy" Title="B.ReconciledBy" />
        <RadzenDataGridColumn TItem="CompareBellStapleDto" Property="MatchStatus" Title="Consolidate">
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code {
    [Parameter]
    public IEnumerable<CompareBellStapleDto> CompareBellStaple { get; set; }

    IList<CompareBellStapleDto> selectedInBoth;

    RadzenDataGrid<CompareBellStapleDto> Grid = new RadzenDataGrid<CompareBellStapleDto>();
    bool visibleMultipleEdit = false;
    bool visibleMultipleDelete = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CompareBellStaple = await Localdb.GetBellStapleCompareFromLocalDb(StateContainer.filterItemDto);

        dialogService.OnClose += CloseDialogeAndSaveData;
    }

    public async Task appliyFilterClicked()
    {
        CompareBellStaple = await Localdb.GetBellStapleCompareFromLocalDb(StateContainer.filterItemDto);
        await Grid.Reload();
        StateHasChanged();
    }

    void CellRender(DataGridCellRenderEventArgs<CompareBellStapleDto> args)
    {

        if (args.Data.BLob == "Wireless")
        {
            args.Data.BSubLob = "Wireless";
            args.Data.SSubLob = "Wireless";

            if (args.Column.Property == "BPhone" || args.Column.Property == "SPhone")
            {
                args.Attributes.Add("style", $"background-color: {(args.Data.BPhone != args.Data.SPhone ? "var(--rz-danger-lighter)" : "var(--rz-base-background-color)")};");
            }

            if (args.Column.Property == "SRebateType" || args.Column.Property == "BRebateType")
            {
                args.Attributes.Add("style", $"background-color: {(args.Data.SRebateType != args.Data.BRebateType ? "var(--rz-danger-lighter)" : "var(--rz-base-background-color)")};");
            }
            //if (args.Column.Property == "BOrderNumber" || args.Column.Property == "SOrderNumber")
            //{
            //    args.Attributes.Add("style", $"background-color: {(args.Data.BOrderNumber != args.Data.SOrderNumber ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
            //}
        }
        if (args.Data.BLob == "Wireline")
        {
            //if ( args.Column.Property == "SOrderNumber"||args.Column.Property == "BOrderNumber" )
            //{
            //    args.Attributes.Add("style", $"background-color: {(args.Data.BOrderNumber != args.Data.SOrderNumber ? "var(--rz-danger-lighter)" : "var(--rz-base-background-color)")};");
            //}
            if (args.Column.Property == "BSubLob" || args.Column.Property == "SSubLob")
            {
                args.Attributes.Add("style", $"background-color: {(args.Data.SSubLob != args.Data.BSubLob ? "var(--rz-danger-lighter)" : "var(--rz-base-background-color)")};");
            }

        }

        if (args.Column.Property == "SAmount" || args.Column.Property == "BAmount")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.SAmount != args.Data.BAmount ? "var(--rz-danger-lighter)" : "var(--rz-base-background-color)")};");
        }

        if (args.Column.Property == "BCustomerName" || args.Column.Property == "SCustomerName")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.BCustomerName?.ToLower() != args.Data.SCustomerName?.ToLower() ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
        }

        if (args.Column.Property == "STransactionDate" || args.Column.Property == "BTransactionDate")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.STransactionDate != args.Data.BTransactionDate ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
        }

        if (args.Column.Property == "BImei" || args.Column.Property == "SImei")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.BImei != args.Data.SImei ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
        }

        if (args.Column.Property == "SBrand" || args.Column.Property == "SBrand")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.SBrand?.ToLower() != args.Data.BBrand?.ToLower() ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
        }
        if (args.Column.Property == "BProduct" || args.Column.Property == "SProduct")
        {
            args.Attributes.Add("style", $"background-color: {(args.Data.BProduct?.ToLower() != args.Data.SProduct?.ToLower() ? "var(--rz-warning-lighter)" : "var(--rz-base-background-color)")};");
        }


    }
    void OnCellDoubleClickBoth(DataGridCellMouseEventArgs<CompareBellStapleDto> args)
    {
        switch (args.Column.Title)
        {
            case "Order #":
                ShowDetailDialog(DetailType.OrderNumber.ToString(), args.Data.SOrderNumber);
                break;

            case "S.IMEI":
                ShowDetailDialog(DetailType.Imei.ToString(), args.Data.SImei);
                break;
            case "B.IMEI":
                ShowDetailDialog(DetailType.Imei.ToString(), args.Data.BImei);
                break;
            case "Phone":
                ShowDetailDialog(DetailType.PhoneNumber.ToString(), args.Data.SPhone?.ToString());
                break;

            default:
                return;
        }
    }

    void ShowDetailDialog(string title, string value)
    {
        var options = new DialogOptions();
        string additionalStyle = "min-width:fit-content;min-height:fit-content;height:fit-content;width:fit-content;border: 1px solid black;";
        options.Style += additionalStyle;
        Dictionary<string, object> parameters = new();
        parameters.Add("title", title);
        parameters.Add("value", value);

        dialogService.Open<DetailDialog>($"{title} : {value}", parameters: parameters, options: options);
    }

    void OnCompareUpdateRow(CompareBellStapleDto record)
    {
        Localdb.UpdateCompareBellStaples(record);
    }

    void CheckAllRecords(bool? isAllSelected)
    {
        selectedInBoth = isAllSelected == true ? Grid.View.ToList() : null;

        foreach (var item in Grid.View.ToList())
            item.IsSelected = isAllSelected.HasValue ? isAllSelected.Value : false;
        HandleMultipleEditVisiblity();
        HandleMultipleDeleteVisiblity();
    }


    void CheckRecord(bool isSelected, CompareBellStapleDto compareRecord)
    {
        compareRecord.IsSelected = isSelected;

        HandleMultipleEditVisiblity();
        HandleMultipleDeleteVisiblity();
    }

    async Task SaveRow(CompareBellStapleDto record)
    {
        record.IsEditMode = false;
        await Grid.UpdateRow(record);
        OnCompareUpdateRow(record);
    }

    void HandleMultipleEditVisiblity()
    {
        var inBothCount = CompareBellStaple.Count(c => c.IsSelected == true);
        if (inBothCount > 0 )
            visibleMultipleEdit = true;
        else
            visibleMultipleEdit = false;
    }

    void HandleMultipleDeleteVisiblity()
    {
        var inbothSelectedCount = CompareBellStaple.Count(c => c.IsSelected == true);

        if (inbothSelectedCount > 0 )
            visibleMultipleDelete = true;
        else
            visibleMultipleDelete = false;
    }

    public async Task ExportCsv()
    {
        string filename = String.Empty;
        Stream fileStream = Stream.Null;

        fileStream = CsvExport.ToCsv(Grid.View.ToList());
        filename = "InBoth";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", $"{filename}_{DateTime.Now.ToString()}.csv", streamRef);

    }

    void MakeMultipleEdit()
    {
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("CompareBellStapleEditModeCount", CompareBellStaple.Count(c => c.IsSelected == true));

        dialogService.Open<MultipleEditDialog>("InBoth Edit Records", parameters: parameters, null);
    }
    void MakeMultipleDelete()
    {
        dialogService.Confirm("Are You Sure Delete Selected Items?", "Delete Selected Items", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
    }

    private async void CloseDialogeAndSaveData(dynamic obj)
    {
        if (obj != null)
        {
            var type = obj.GetType();
            if (type == typeof(MultipleEditDialogResult))
            {
                var dataToSave = (MultipleEditDialogResult)obj;

                foreach (var item in CompareBellStaple.Where(c => c.IsSelected == true))
                {
                    item.SComments = dataToSave.SComment;
                    item.SReconciled = dataToSave.Reconciled;

                    item.BComments = dataToSave.BComment;
                    item.BReconciled = dataToSave.Reconciled;

                    item.IsReconciled = dataToSave.Reconciled;

                    await SaveRow(item);
                }
                CheckAllRecords(false);

            }
            else if (type == typeof(bool))
            {
                var acceptToDelete = (bool)obj;
                if (acceptToDelete)
                {
                    DeleteSelectedItems();
                }
            }
            StateHasChanged();
        }

    }

    async Task DeleteSelectedItems()
    {
        ToDeleteItemsDto toDeleteItemsDto = new ToDeleteItemsDto();

        var isSelectedItems = CompareBellStaple.Where(c => c.IsSelected == true);
        foreach (var item in isSelectedItems)
            toDeleteItemsDto.BellIds.Add(item.BId);


        SyncData.DeleteItems(toDeleteItemsDto);

        foreach (var item in toDeleteItemsDto.BellIds)
            await Localdb.DeleteBellSource(item);

        CompareBellStaple = CompareBellStaple.Where(c => !toDeleteItemsDto.BellIds.Contains(c.BId)).ToList();

        HandleMultipleDeleteVisiblity();
        HandleMultipleEditVisiblity();

        await Grid.Reload();
    }
}
