@using Microsoft.Extensions.Logging;

@inject DialogService dialogService
@inject ILogger<MultipleEditDialog> _logger

<RadzenStack Orientation="Orientation.Horizontal" Gap="50">
    <RadzenText TextStyle="TextStyle.Body1"><b> Staples selected records count :@(StaplesEditModeCount)</b></RadzenText>
</RadzenStack>

<RadzenCard>
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Comment:</RadzenText>
    <RadzenTextArea @bind-value=@sComment class="w-100" />

    <RadzenCheckBox @bind-Value=@reconciled Name="ReconciledCheckBox" />
    <RadzenLabel Text="Reconciled" Component="ReconciledCheckBox" Style="margin-left: 8px; vertical-align: middle;" />
</RadzenCard>

<RadzenCard>
    <RadzenButton Click="@CancelEdit" Text="Cancel" Icon="cancel" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" />
    <RadzenButton Click="@DoEdit" Text="Edit Item(s)" Icon="check_circle" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Info" />
</RadzenCard>

@code {
    [Parameter]
    public int StaplesEditModeCount { get; set; }

    string sComment;
    bool reconciled;


    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    private async Task CancelEdit()
    {
        dialogService.Close();
        StateHasChanged();
    }

    private async Task DoEdit()
    {
        MultipleEditStaplesSourceResult dataToSave = new MultipleEditStaplesSourceResult();
        dataToSave.Comment = sComment;
        dataToSave.Reconciled = reconciled;
        try
        {
            dialogService.Close(dataToSave);
            StateHasChanged();

        }
        catch (Exception ex)
        {
            //_logger.LogError($"AcceptUpload: {ex.Message}");
            throw;
        }
    }
}