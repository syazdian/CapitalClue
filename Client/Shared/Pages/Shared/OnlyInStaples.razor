@page "/OnlyInStaples"

@using CapitalClue.Common.Models
@using CapitalClue.Common.Models.Enums;
@using CapitalClue.Frontend.Shared.Pages.Components
@using CapitalClue.Frontend.Shared.Pages.Shared.MultipleEdit;
@using CapitalClue.Frontend.Shared.ServiceInterfaces;
@using Microsoft.EntityFrameworkCore;
@inject DialogService dialogService
@inject ICsvExport CsvExport
@inject ILocalDbRepository Localdb
@inject IJSRuntime JS
@inject IStateContainer StateContainer

<div style="float:right">
    <RadzenButton Click=@(MakeMultipleEdit) Visible=@visibleMultipleEdit Text="Edit Items" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" Icon="copy_all" style="color:green" />
    <RadzenButton Click=@(ExportCsv) Text="CSV" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" Icon="assignment_returned" style="color:green" />
</div>
<br />
<br />
<RadzenDataGrid @ref="StapleGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" AllowVirtualization="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" CellDoubleClick="OnCellDoubleClickStaples"
                Data="@StaplesSources" TItem="OnlyInStaplesDto" ColumnWidth="150px" RowUpdate="@OnStapleUpdateRow"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedStaple>
    <Columns>
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Width="60px" Sortable="false" Filterable="false">
           @* <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool?"
                                Value="@(selectedStaple == null || selectedStaple?.Any() != true ? false : !StaplesSources.All(i => selectedStaple.Contains(i)) ? null : StaplesSources.Any(i => selectedStaple.Contains(i)))"
                                Change="@(args => CheckAllStaplesRecords(args))" />
            </HeaderTemplate>*@

            <Template Context="staplesRecord">
                <RadzenCheckBox TriState="false" Value="@(selectedStaple != null && selectedStaple.Contains(staplesRecord))"
                                TValue="bool" Change=@(args => CheckRecord(args,staplesRecord)) />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="RebateType" Title="RebateType" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="TransactionDate" Title="TransactionDate" FormatString="{0:d}" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="OrderNumber" Title="Order #" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Phone" Title="Phone" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Amount" Title="Amount" TextAlign="TextAlign.Right" FormatString="{0:0.00}" Sortable="false" Width="100px" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Reconciled" Title="Reconciled" Width="130px"/>
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Comments" Title="Comments"/>
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="BellTransactionId" Title="BellTransactionId" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Imei" Title="IMEI" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Product" Title="Product" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="StoreNumber" Title="Store#" Width="100px" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Location" Title="Location" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Lob" Title="Lob" Width="100px" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="SubLob" Title="SubLob" Width="120px" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="Brand" Title="Brand" Width="100px" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="CustomerName" Title="CustomerName" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="UpdateDate" Title="UpdateDate" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="ReconciledDate" Title="ReconciledDate" />
        <RadzenDataGridColumn TItem="OnlyInStaplesDto" Property="ReconciledBy" Title="ReconciledBy" />
    </Columns>
</RadzenDataGrid>
@code {

    [Parameter]
    public IEnumerable<OnlyInStaplesDto> StaplesSources { get; set; }

    IList<OnlyInStaplesDto> selectedStaple;

    RadzenDataGrid<OnlyInStaplesDto> StapleGrid = new RadzenDataGrid<OnlyInStaplesDto>();
    bool visibleMultipleEdit = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StaplesSources = await Localdb.GetStapleSourceFromLocalDb(StateContainer.filterItemDto);

        dialogService.OnClose += CloseDialogeAndSaveData;
    }

    public async Task appliyFilterClicked()
    {
        StaplesSources = await Localdb.GetStapleSourceFromLocalDb(StateContainer.filterItemDto);
        await StapleGrid.Reload();
        StateHasChanged();
    }

    void OnCellDoubleClickStaples(DataGridCellMouseEventArgs<OnlyInStaplesDto> args)
    {
        switch (args.Column.Title)
        {
            case "Order #":
                ShowDetailDialog(DetailType.OrderNumber.ToString(), args.Data.OrderNumber?.ToString());
                break;
            case "IMEI":
                ShowDetailDialog(DetailType.Imei.ToString(), args.Data.Imei);
                break;
            case "Phone":
                ShowDetailDialog(DetailType.PhoneNumber.ToString(), args.Data.Phone?.ToString());
                break;
            default:
                return;
        }
    }
    void ShowDetailDialog(string title, string value)
    {
        var options = new DialogOptions();
        string additionalStyle = "min-width:fit-content;min-height:fit-content;height:fit-content;width:fit-content;border: 1px solid black;";
        options.Style += additionalStyle;
        Dictionary<string, object> parameters = new();
        parameters.Add("title", title);
        parameters.Add("value", value);

        dialogService.Open<DetailDialog>($"{title} : {value}", parameters: parameters, options: options);
    }

    void OnStapleUpdateRow(OnlyInStaplesDto record)
    {
        var result = Localdb.UpdateStapleSource(record);
    }

    void CheckAllStaplesRecords(bool? isAllSelected)
    {
        selectedStaple = isAllSelected == true ? StapleGrid.View.ToList() : null;

        foreach (var item in StapleGrid.View.ToList())
            item.IsSelected = isAllSelected.HasValue ? isAllSelected.Value : false;
        HandleMultipleEditVisiblity();
    }

     void CheckRecord(bool isSelected, OnlyInStaplesDto bellRecord)
    {
        bellRecord.IsSelected = isSelected;

        HandleMultipleEditVisiblity();
    }

    async Task SaveStapleRow(OnlyInStaplesDto record)
    {
        record.IsEditMode = false;
        await StapleGrid.UpdateRow(record);
        OnStapleUpdateRow(record);
    }

    void HandleMultipleEditVisiblity()
    {
        var staplesCount = StaplesSources.Count(c => c.IsSelected == true);
        if ( staplesCount > 0 )
            visibleMultipleEdit = true;
        else
            visibleMultipleEdit = false;
    }

    public async Task ExportCsv()
    {
        string filename = String.Empty;
        Stream fileStream = Stream.Null;
       
        fileStream = CsvExport.ToCsv(StapleGrid.View.ToList());
        filename = "OnlyStaples";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", $"{filename}_{DateTime.Now.ToString()}.csv", streamRef);

    }

    void MakeMultipleEdit()
    {
        Dictionary<string, object> parameters = new Dictionary<string, object>();
        parameters.Add("StaplesEditModeCount", StaplesSources.Count(c => c.IsSelected == true));

        dialogService.Open<MultipleEditStaplesSources>("Staples Edit Records", parameters: parameters, null);
    }

    private async void CloseDialogeAndSaveData(dynamic obj)
    {
        if (obj != null)
        {
            var type = obj.GetType();
            if (type == typeof(MultipleEditStaplesSourceResult))
            {
                var dataToSave = (MultipleEditStaplesSourceResult)obj;


                foreach (var item in StaplesSources.Where(c => c.IsSelected == true))
                {
                    item.Comments = dataToSave.Comment;
                    item.Reconciled = dataToSave.Reconciled;

                    await SaveStapleRow(item);
                }
                CheckAllStaplesRecords(false);

               
            }
            StateHasChanged();
        }

    }
}
