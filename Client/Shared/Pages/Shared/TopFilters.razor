@using CapitalClue.Common.Models.Domain;
@using CapitalClue.Frontend.Shared.ServiceInterfaces;
@using Radzen;
@inject IFilterService filterService
@inject IStateContainer StateContainer

<div class="row featurette">
    <div class="col-md-7">
        <h2 class="featurette-heading">FILTERS</h2>
    </div>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
        <RadzenFormField Text="LOB" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@loBs @bind-Value="@lobValue" Change="@SetSubLob" AllowClear=true />
            <RadzenDropDown Data=@subLOBs @bind-Value="@subLobValue" AllowClear=true />
        </RadzenFormField>

        <RadzenFormField Text="Rebate Type" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@rebateType @bind-Value="@rebateValue" AllowClear=true />
        </RadzenFormField>
        <RadzenFormField Text="Brand" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@brands @bind-Value="@brandValue" AllowClear=true />
        </RadzenFormField>
        <RadzenFormField Text="StoreNumbers" Variant=@variantStyle Style="flex: 1;">
            <RadzenDropDown Data=@storeNumbers @bind-Value="@storeNumberValue" AllowClear=true />
        </RadzenFormField>
    </RadzenStack>
    
    <div class="rz-text-align-right">
        <RadzenButton Click=@(ResetFilter) Text="Reset Filter" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Light" />
        <RadzenButton Click=@(ApplyFilter) Text="Apply Filter" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Info" />
    </div>
</div>
<hr class="featurette-divider">

@code {
    Variant variantStyle = Variant.Flat;

    FilterItemDto filterItemDto = new();
    string lobValue;
    List<string> loBs = new();
    string subLobValue;
    List<string> subLOBs = new();
    string brandValue;
    List<string> brands = new();
    string rebateValue = string.Empty;
    List<string> rebateType = new();
    string storeNumberValue = string.Empty;
    List<string> storeNumbers = new();


    FilterItemsDisplay filterItems = new();
    private FilterItemDto initial = new FilterItemDto();

    [Parameter]
    public EventCallback<FilterItemDto> FilterChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        filterItems = await filterService.GetFilterItems();
        loBs = filterItems.LoBs.Select(x => x.Name).ToList();
        brands = filterItems.Brands;
        rebateType = filterItems.RebateTypes;
        storeNumbers = StateContainer.StoreNumberDisplay;
        

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender == true)
        {
            if (!string.IsNullOrEmpty(StateContainer.filterItemDto.Lob))
            {
                lobValue = StateContainer.filterItemDto.Lob;
                initial.Lob = StateContainer.filterItemDto.Lob;
                SetSubLob();
            }
            if (!string.IsNullOrEmpty(StateContainer.filterItemDto.SubLob))
            {
                subLobValue = StateContainer.filterItemDto.SubLob;
                initial.SubLob = StateContainer.filterItemDto.SubLob;
            }
            if (!string.IsNullOrEmpty(StateContainer.filterItemDto.Brand))
            {
                brandValue = StateContainer.filterItemDto.Brand;
                initial.Brand = StateContainer.filterItemDto.Brand;
            }
            if (!string.IsNullOrEmpty(StateContainer.filterItemDto.StoreNumber))
            {
                storeNumberValue = StateContainer.filterItemDto.StoreNumber;
                initial.StoreNumber = StateContainer.filterItemDto.StoreNumber;
            }
            if (!string.IsNullOrEmpty(StateContainer.filterItemDto.RebateValue))
            {
                rebateValue = StateContainer.filterItemDto.RebateValue;
                initial.RebateValue = StateContainer.filterItemDto.RebateValue;
            }
        }
    }

    protected async void SetSubLob()
    {
        subLobValue = string.Empty;
        subLOBs = filterItems.LoBs.Where(x => x.Name == lobValue).Select(y => y.SubLoBs).FirstOrDefault();
        StateHasChanged();
    }

    protected async void ApplyFilter()
    {
        filterItemDto.Lob = lobValue;
        filterItemDto.SubLob = subLobValue;
        filterItemDto.RebateValue = rebateValue;
        filterItemDto.Brand = brandValue;
        filterItemDto.StoreNumber = storeNumberValue;

        await FilterChanged.InvokeAsync(filterItemDto);

    }

    protected void ResetFilter()
    {
        lobValue = string.Empty;
        //if (!string.IsNullOrEmpty(initial.Lob))
        //    SetSubLob();

        //subLobValue = initial.SubLob;
        //rebateValue = initial.RebateValue;
        //brandValue = initial.Brand;
        //storeNumberValue = initial.StoreNumber;

        subLobValue = string.Empty;
        rebateValue = string.Empty;
        brandValue = string.Empty;
        storeNumberValue = string.Empty;
    }



}